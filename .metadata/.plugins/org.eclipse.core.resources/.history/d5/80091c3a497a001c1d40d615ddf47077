package rs.ac.bg.etf.pp1;
import org.apache.log4j.Logger;
import rs.ac.bg.etf.pp1.ast.*;

import rs.etf.pp1.symboltable.*;
import rs.etf.pp1.symboltable.concepts.*;

public class SemanticPass  extends VisitorAdaptor{

	
	boolean errorDetected = false;
	Logger log = Logger.getLogger(getClass());
	
	Struct currVarType=null;
	
	
	public void report_error(String message, SyntaxNode info) {
		errorDetected = true;
		StringBuilder msg = new StringBuilder(message);
		int line = (info == null) ? 0: info.getLine();
		if (line != 0)
			msg.append (" na liniji ").append(line);
		log.error(msg.toString());
	}

	public void report_info(String message, SyntaxNode info) {
		StringBuilder msg = new StringBuilder(message); 
		int line = (info == null) ? 0: info.getLine();
		if (line != 0)
			msg.append (" na liniji ").append(line);
		log.info(msg.toString());
	}
	
	
	 public void visit(ProgName progName){
		 progName.obj=Tab.insert(Obj.Prog, progName.getProgName(), Tab.noType);
	    Tab.openScope();
	 }
	    
    public void visit(Program program){
//    	nVars = Tab.currentScope.getnVars();
    	Tab.chainLocalSymbols(program.getProgName().obj);
    	Tab.closeScope();
    }
    
	public void visit(VarDecl varDecl){
		//varDeclCount++;
///!!!!!!!!!!!!!!!!!!!!!!DODAJ
//		report_info("Deklarisana promenljiva "+ varDecl.getVarName(), varDecl);
//		Obj varNode = Tab.insert(Obj.Var, varDecl.getVarName(), varDecl.getType().struct);
	}
	public void visit(VariableNoArray variable){
		Obj error_handler = Tab.find(variable.getVarName());
		if(error_handler!= Tab.noObj) {//already exists in Tab
//mirko ima if jos jedan
			report_error("ERROR! VARIABLE " + variable.getVarName() + " ALREADY DEFINED IN SYMBOL TABLE! ", null);
		}
	}
	public void visit(VariableArray variable){
		
	}
	
	
	 public void visit(Type type){
		 Obj objType = Tab.find(type.getTypeName());
			
			if(objType == Tab.noObj){ //tip ne postoji
				report_error("TYPE " + type.getTypeName() + " NOT FOUND IN SYMBOL TABLE! ", null);
				currVarType=Tab.noType;
			}
			else {
				if(objType.getKind()!=Obj.Type) {//ako postoji ali nije tip
					report_error("ERROR! " + type.getTypeName() + " IS NOT A VALID!", type);
					currVarType=Tab.noType;
				}
				else {
					currVarType=objType.getType();
				}
			}
			
			
			currVarType=
	 }
}
