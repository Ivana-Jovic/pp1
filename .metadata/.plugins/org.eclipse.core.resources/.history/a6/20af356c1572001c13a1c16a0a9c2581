package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, BREAK, CLASS, ENUM, ELSE, CONST, IF, DO, WHILE, NEW, PRINT, READ;
terminal RETURN, VOID, EXTENDS, CONTINUE, THIS, SUPER, GOTO, RECORD;
terminal MINUS, PLUS, MUL, DIV, MOD, EQUAL, NOTEQ, GRT, GRTE, LESS, LESSE;
terminal AND, OR, ASSIGN, PLUSPLUS, MINUSMINUS, COLON, SEMI, COMMA, DOT;

terminal LBRACE, RBRACE, LPAREN, RPAREN, LSQUARE, RSQUARE;
terminal Integer NUMBER ;
terminal String IDENT ;
terminal Character CHAR ;
terminal Boolean BOOL ;

nonterminal Program, Epsilon, ProgList, MethodDeclList, ConstDecl, ConstDeclList, ConstType;

nonterminal VarDecl, VarDeclList, ClassDecl, VarDeclListList;
nonterminal ConstrMeth, MethodDeclListList, RecordDecl, MethodDecl, MethDeclType;
nonterminal FormParsList, StatementList, FormPars, Type, Statement, SingleStatement;
nonterminal Statements, DesignatorStatement;
nonterminal ActPars, Condition, CondTerm, CondFact, Expr, Term, Factor, Designator;
nonterminal DesignList, Label, Assignop, Relop, Addop, Mulop;






Program ::= (Program) PROG IDENT ProgList LBRACE RBRACE ;
ProgList ::= (ProgListConstDecl) ProgList ConstDecl
			|
			(NoProgList) Epsilon
			;
ConstDecl ::= (ConstDecl) CONST Type IDENT ASSIGN ConstType ConstDeclList SEMI;
ConstDeclList::= (YConstDeclList) COMMA IDENT ASSIGN ConstType
				|
				(NoConstDeclList) Epsilon
				;
ConstType ::= (ConstTypeNumber) NUMBER
			|
			(ConstTypeChar) CHAR
			|
			(ConstTypeBool) BOOL
			;
Type ::= (Type)IDENT;
Epsilon ::= (Epsilon) /*epsilon */;










