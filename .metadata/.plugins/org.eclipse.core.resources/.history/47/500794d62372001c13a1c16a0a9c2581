package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, BREAK, CLASS, ENUM, ELSE, CONST, IF, DO, WHILE, NEW, PRINT, READ;
terminal RETURN, VOID, EXTENDS, CONTINUE, THIS, SUPER, GOTO, RECORD;
terminal MINUS, PLUS, MUL, DIV, MOD, EQUAL, NOTEQ, GRT, GRTE, LESS, LESSE;
terminal AND, OR, ASSIGN, PLUSPLUS, MINUSMINUS, COLON, SEMI, COMMA, DOT;

terminal LBRACE, RBRACE, LPAREN, RPAREN, LSQUARE, RSQUARE;
terminal Integer NUMBER ;
terminal String IDENT ;
terminal Character CHAR ;
terminal Boolean BOOL ;

nonterminal Program, Epsilon, ProgList, MethodDeclList, ConstDecl, ConstDeclList, ConstType;

nonterminal VarDecl, VarDeclList, ClassDecl, VarDeclListList;
nonterminal ConstrMeth, MethodDeclListList, RecordDecl, MethodDecl, MethDeclType;
nonterminal FormParsList, StatementList, FormPars, Type, Statement, SingleStatement;
nonterminal Statements, DesignatorStatement;
nonterminal ActPars, Condition, CondTerm, CondFact, Expr, Term, Factor, Designator;
nonterminal DesignList, Label, Assignop, Relop, Addop, Mulop;



precedence left ELSE;


Program ::= (Program) PROG IDENT ProgList LBRACE MethodDeclList RBRACE ;
ProgList ::= (ProgListConstDecl) ProgList ConstDecl
			|
			(ProgListVarDecl) ProgList VarDecl
			|
			(ProgListClassDecl) ProgList ClassDecl
			|
			(ProgListRecordDecl) ProgList RecordDecl
			|
			(ProgListNoProgList) Epsilon
			;
MethodDeclList ::= (YMethodDeclList) MethodDeclList MethodDecl
				|		
				(NoMethodDeclList) Epsilon
				;



ConstDecl ::= (ConstDecl) CONST Type IDENT ASSIGN ConstType ConstDeclList SEMI;
ConstDeclList::= (YConstDeclList) ConstDeclList COMMA IDENT ASSIGN ConstType
				|
				(NoConstDeclList) Epsilon
				;
ConstType ::= (ConstTypeNumber) NUMBER
			|
			(ConstTypeChar) CHAR
		
			;



VarDecl ::= (VarDeclSquare) Type IDENT LSQUARE RSQUARE VarDeclList SEMI
			|
			(VarDeclNoSquare) Type IDENT VarDeclList SEMI
			;
VarDeclList ::= (VarDeclListSquare) VarDeclList COMMA IDENT LSQUARE RSQUARE 
			| 
			(VarDeclListNoSquare) VarDeclList COMMA IDENT 
			|
			(NoVarDeclList) Epsilon
			;




ClassDecl ::= (ClassDeclType) CLASS IDENT EXTENDS Type LBRACE VarDeclListList ConstrMeth RBRACE
			|
			(ClassDeclNoType) CLASS IDENT LBRACE VarDeclListList ConstrMeth RBRACE
			;
VarDeclListList::=  (YVarDeclListList) VarDeclListList VarDecl
				|
				(NoVarDeclListList) Epsilon
				;
ConstrMeth ::= (ConstrMethNoConstr) LBRACE MethodDeclListList RBRACE 
				|
				(NoConstrMeth) Epsilon
				;
MethodDeclListList ::= (YMethodDeclListList) MethodDeclListList MethodDecl
					|
					(NoMethodDeclListList) Epsilon
					;
	
	
	
	
RecordDecl ::= (RecordDecl) RECORD IDENT LBRACE VarDeclListList RBRACE;



				





MethodDecl ::= (MethodDecl) MethDeclType IDENT LPAREN FormParsList RPAREN VarDeclListList LBRACE StatementList RBRACE;
MethDeclType::= (MethDeclTypeType) Type
				|
				(MethDeclTypeVoid) VOID
				;
FormParsList ::= (YFormParsList) FormPars
				| 
				(NoFormParsList) Epsilon
				;
StatementList ::= (YStatementList) StatementList Statement
				| 
				(NoStatementList) Epsilon
				;




FormPars ::= (FormParsSquare)Type IDENT LSQUARE RSQUARE
			|
			(FormParsNoSquare) Type IDENT
			|
			(FormParsSquareList) FormPars COMMA Type IDENT LSQUARE RSQUARE
			|
			(FormParsNoSquareList) FormPars COMMA Type IDENT
			;



Type ::= (Type)IDENT;



Statement ::= (Statement) Statements
			|
			Label COLON SingleStatement
			|
			SingleStatement
			;



SingleStatement::= (SingleStatementDesi) DesignatorStatement SEMI
					|
					(SingleStatementIfElse) IF LPAREN Condition RPAREN Statement ELSE Statement
					|
					(SingleStatementIf) IF LPAREN Condition RPAREN Statement
					|
					(SingleStatementDo) DO Statement WHILE LPAREN Condition RPAREN SEMI
					|
					(SingleStatementBreak) BREAK SEMI
					|
					(SingleStatementContinue) CONTINUE SEMI
					|
					(SingleStatementRetExpr) RETURN Expr SEMI
					|
					(SingleStatementRet) RETURN SEMI
					|
					(SingleStatementRead) READ LPAREN Designator RPAREN SEMI
					|
					(SingleStatementPrintNum) PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI
					|
					(SingleStatementPrint) PRINT LPAREN Expr RPAREN SEMI
					;
					




Statements ::= (Statements) LBRACE StatementList RBRACE;

DesignatorStatement ::= (DesignatorAssignop) Designator Assignop Expr
						|
						(DesignatorActpars) Designator LPAREN ActPars RPAREN
						|
						(DesignatorParen) Designator LPAREN RPAREN
						|
						(DesignatorPlus) Designator PLUSPLUS
						|
						(DesignatorMinus) Designator MINUSMINUS
						;

						
ActPars ::= (ActParsNoList)Expr
			|
			(ActParsList) ActPars COMMA Expr
			;

Condition ::= (ConditionNoList) CondTerm
			|
			(ConditionList) Condition OR CondTerm
			;
CondTerm ::= (CondTermNoList) CondFact
			|
			(CondTermList) CondTerm AND CondFact
			;
CondFact ::= (CondFactNoList) Expr
			|
			(CondFactList) Expr Relop Expr
			;
Expr ::= (ExprMin)MINUS Term
		|
		(ExprTerm) Term
		|
		(ExprAddop) Expr Addop Term
		;
Term ::= (TermFactor)Factor
		|
		(TermMlop)Term Mulop Factor
		;
Factor ::= (FactorDesParenAct)Designator LPAREN ActPars RPAREN
			|
			(FactorDes) Designator
			|
			(FactorDesPar) Designator LPAREN RPAREN
			|
			(FactorNum) NUMBER
			|
			(FactorChar) CHAR
			|
			(FactorTypeExpr) NEW Type LSQUARE Expr RSQUARE
			|
			(FactorType) NEW Type
			|
			(FactorParen) LPAREN Expr RPAREN
			; 
Designator ::= (Designator) IDENT DesignList;
DesignList ::= (DesignListDot) DesignList DOT IDENT
			| 
			(DesignListSquare) DesignList LSQUARE Expr RSQUARE
			|
			(NoDesignList) Epsilon
			;
	
Label ::=(Label) IDENT;
Assignop::= (Assignop) ASSIGN;
Relop ::= (RelopEqual)EQUAL 
		|
		(RelopNotEq) NOTEQ
		|
		(RelopGrt) GRT
		|
		(RelopGrte) GRTE
		|
		(RelopLess) LESS
		|
		(RelopLesse) LESSE
		;
Addop ::= (AddopPlus) PLUS
		|
		(AddopMinus) MINUS
		;
Mulop ::= (MulopMul) MUL 
		|
		(MulopDiv) DIV
		|
		(MulopMod) MOD
		;

Epsilon ::= (Epsilon) /*epsilon */;





















